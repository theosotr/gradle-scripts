buildscript {
  repositories {
    maven { url "https://plugins.gradle.org/m2/" }
  }
  dependencies {
    classpath 'gradle.plugin.com.github.sherter.google-java-format:google-java-format-gradle-plugin:0.+'
    //classpath 'com.github.spotbugs:com.github.spotbugs.gradle.plugin:1.+'
    classpath 'se.bjurr.violations:violations-gradle-plugin:1.+'
    //classpath 'net.ltgt.gradle:gradle-errorprone-javacplugin-plugin:0.+'
    classpath 'gradle.plugin.com.github.ksoichiro:gradle-build-info-plugin:0.+'
    //classpath 'org.junit.platform:junit-platform-gradle-plugin:1.+'
  }
}

apply plugin: com.github.sherter.googlejavaformatgradleplugin.GoogleJavaFormatPlugin
apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'findbugs'
//apply plugin: com.github.spotbugs.SpotBugsPlugin
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'
apply plugin: se.bjurr.violations.gradle.plugin.ViolationsGradlePlugin
//apply plugin: net.ltgt.gradle.errorprone.javacplugin.ErrorProneJavacPluginPlugin
apply plugin: com.github.ksoichiro.build.info.BuildInfoPlugin
//apply plugin: org.junit.platform.gradle.plugin.JUnitPlatformPlugin

ext.projectDisplayName = (project.name.substring(0, 1).toUpperCase()+project.name.substring(1)).replaceAll('-',' ')

task wrapper(type: Wrapper) {
 gradleVersion = '5.0'
 distributionType = Wrapper.DistributionType.ALL
}

//import net.ltgt.gradle.errorprone.*

//task googleErrorProne {
//  finalizedBy {
//    compileJava.toolChain net.ltgt.gradle.errorprone.ErrorProneToolChain.create(project)
//    compileJava
//  }
//}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
 mavenLocal()
 mavenCentral()
 jcenter()
 maven { url 'https://jitpack.io' }
}

test {
 if (System.getProperty('DEBUG', 'false') == 'true') {
  jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=9009'
 }
}

if (JavaVersion.current().isJava8Compatible()) {
 allprojects {
  tasks.withType(Javadoc) {
   options.addStringOption('Xdoclint:none', '-quiet')
  }
 }
}

eclipse {
 classpath {
  downloadSources = true
  downloadJavadoc = true
 }
}

sourceSets {
 main.java.srcDirs = ['src/main/java' ]
 test.java.srcDirs = ['src/test/java' ]
}

if (JavaVersion.current().isJava8Compatible()) {
 allprojects {
  tasks.withType(Javadoc) {
   options.addStringOption('Xdoclint:none', '-quiet')
  }
 }
}

compileJava.dependsOn 'googleJavaFormat'


findbugs {
 ignoreFailures = true
 effort = "max"
 showProgress = true
 reportLevel = "low"
 sourceSets = [sourceSets.main]
}

//spotbugs {
// ignoreFailures = true
// effort = "max"
// showProgress = true
// reportLevel = "low"
// sourceSets = [sourceSets.main]
//}

task violations(type: se.bjurr.violations.gradle.plugin.ViolationsTask) {
 minSeverity = 'INFO'
 detailLevel = 'VERBOSE' // PER_FILE_COMPACT, COMPACT or VERBOSE
 maxViolations = 9999
 printViolations = true // Will print violations found in diff
 
 // Many more formats available, see: https://github.com/tomasbjerre/violations-lib
 violations = [
  ["FINDBUGS", ".", ".*/build/reports/findbugs/.*\\.xml\$","Findbugs"],
  ["FINDBUGS", ".", ".*/build/reports/spotbugs/.*\\.xml\$","Spotbugs"],
  ["GOOGLEERRORPRONE", ".", ".*/build/googleErrorProne.*\\.log\$","Error Prone"]
 ]
}

check.finalizedBy violations
